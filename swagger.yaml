basePath: /
consumes:
- application/json
definitions:
  Product:
    properties:
      description:
        type: string
        x-go-name: Description
      id:
        format: int64
        type: integer
        x-go-name: ID
      name:
        type: string
        x-go-name: Name
      price:
        format: float
        type: number
        x-go-name: Price
      sku:
        type: string
        x-go-name: SKU
    type: object
    x-go-package: github.com/AliAkberAakash/microservices-with-go/data
info:
  description: |-
    Documentation for Product API

    Schemes http
  title: Product API
  version: 1.0.0
paths:
  /:
    get:
      description: Returns a list of all products
      operationId: listProducts
      responses:
        "200":
          $ref: '#/responses/productsResponse'
      tags:
      - products
    post:
      description: |-
        Add a new product
        Throws error if data is invalid
      operationId: addProduct
      responses:
        "200":
          $ref: '#/responses/noResponse'
      tags:
      - products
  /{id}:
    delete:
      description: |-
        Deletes product with given id
        Throws error is product not found
      operationId: deleteProduct
      responses:
        "200":
          $ref: '#/responses/noResponse'
      tags:
      - products
    put:
      description: |-
        Update product with given id
        Throws error if data is invalid
      operationId: updateProduct
      responses:
        "200":
          $ref: '#/responses/noResponse'
      tags:
      - products
produces:
- application/json
responses:
  noResponse:
    description: Empty response
  productsResponse:
    description: A list of prducts returns in the response
    schema:
      items:
        $ref: '#/definitions/Product'
      type: array
swagger: "2.0"
